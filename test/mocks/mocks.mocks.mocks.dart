// Mocks generated by Mockito 5.4.6 from annotations
// in idez_test/test/mocks/mocks.mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:idez_test/src/core/errors/failure.dart' as _i5;
import 'package:idez_test/src/modules/categories/data/models/category_model.dart'
    as _i10;
import 'package:idez_test/src/modules/shared/data/data_source/task_local_data_source.dart'
    as _i9;
import 'package:idez_test/src/modules/shared/data/models/task_model.dart'
    as _i8;
import 'package:idez_test/src/modules/shared/domain/entities/category_entity.dart'
    as _i7;
import 'package:idez_test/src/modules/shared/domain/entities/task_entity.dart'
    as _i6;
import 'package:idez_test/src/modules/shared/domain/repository/shared_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SharedRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedRepository extends _i1.Mock implements _i3.SharedRepository {
  MockSharedRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>> getAllTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTasks, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.TaskEntity>>(
                    this,
                    Invocation.method(#getAllTasks, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>> getAllDoneTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getAllDoneTasks, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.TaskEntity>>(
                    this,
                    Invocation.method(#getAllDoneTasks, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.CategoryEntity>>>
  getAllCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getAllCategories, []),
            returnValue:
                _i4.Future<
                  _i2.Either<_i5.Failure, List<_i7.CategoryEntity>>
                >.value(
                  _FakeEither_0<_i5.Failure, List<_i7.CategoryEntity>>(
                    this,
                    Invocation.method(#getAllCategories, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i7.CategoryEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteFromId(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFromId, [id]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#deleteFromId, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteFromIdRange(
    Iterable<String>? ids,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFromIdRange, [ids]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#deleteFromIdRange, [ids]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateFromId(
    String? id,
    _i8.TaskModel? task,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateFromId, [id, task]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#updateFromId, [id, task]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [TasksLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksLocalDataSource extends _i1.Mock
    implements _i9.TasksLocalDataSource {
  MockTasksLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i8.TaskModel>> getAllTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTasks, []),
            returnValue: _i4.Future<List<_i8.TaskModel>>.value(
              <_i8.TaskModel>[],
            ),
          )
          as _i4.Future<List<_i8.TaskModel>>);

  @override
  _i4.Future<List<_i10.CategoryModel>> getAllCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getAllCategories, []),
            returnValue: _i4.Future<List<_i10.CategoryModel>>.value(
              <_i10.CategoryModel>[],
            ),
          )
          as _i4.Future<List<_i10.CategoryModel>>);

  @override
  _i4.Future<void> saveAllTasks(List<_i8.TaskModel>? tasks) =>
      (super.noSuchMethod(
            Invocation.method(#saveAllTasks, [tasks]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveAllCategories(List<_i10.CategoryModel>? cats) =>
      (super.noSuchMethod(
            Invocation.method(#saveAllCategories, [cats]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
